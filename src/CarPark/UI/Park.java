package CarPark.UI;

import CarPark.Algorithm.AlgGeneratedPark;
import CarPark.IO.CarPark;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.GeneralPath;

/**
 * The Park class represents the park layouts from data from the CarPark
 * class.
 * 
 * @author Sam Leichter
 */
public class Park {
    // Stores the polylines that will be drawn in CarParkInterfacePanel

    // Used in the determining what direction to draw the parks.
    public static final int DEG0 = 0;
    public static final int DEG60 = 60;
    public static final int DEG90 = 90;
    // Stores the GeneralPaths that defines what way to draw the parks
    private GeneralPath parkLine0, parkLine60, parkLine90;
    // Stores the integer that defines what direction to draw the parks
    private int parkDir = Park.DEG0;

    /**
     * Constructor: Sets up the Park GeneralPaths with data retrieved from the
     * CarPark object.
     *
     * All car parks are created with the bottom left corner at (0,0)
     *
     * @param CPData the data storing the car park metrics.
     */
    public Park(CarPark CPData) {

        //park lines to be drawn when the algorithm is run.
        parkLine0 = new GeneralPath(GeneralPath.WIND_EVEN_ODD, 3);
        parkLine60 = new GeneralPath(GeneralPath.WIND_EVEN_ODD, 3);
        parkLine90 = new GeneralPath(GeneralPath.WIND_EVEN_ODD, 3);

        //draw the 0deg park
        // |__| bottom left hand corner is (0,0)
        parkLine0.moveTo(0, CPData.getAngle0Width() * 25);
        parkLine0.lineTo(0, 0);
        parkLine0.lineTo(CPData.getAngle0Length() * 25, 0);
        parkLine0.lineTo(CPData.getAngle0Length() * 25, CPData.getAngle0Width() * 25);

        //draw the 60deg park
        // /_/ bottom left hand corner is (0,0)
        //doing a bit of extra math to calculate the x displacement from the angle
        double moveOver = CPData.getAngle60Depth() / Math.tan(60.0 * Math.PI / 180.0);
        parkLine60.moveTo(moveOver * 25, CPData.getAngle60Depth() * 25);
        parkLine60.lineTo(0, 0);
        parkLine60.lineTo(CPData.getAngle60Width() * 25, 0);
        parkLine60.lineTo(CPData.getAngle60Width() * 25 + moveOver * 25, CPData.getAngle60Depth() * 25);

        //draw the 90deg park
        // |_| bottom left hand corner is (0,0)
        parkLine90.moveTo(0, CPData.getAngle90Depth() * 25);
        parkLine90.lineTo(0, 0);
        parkLine90.lineTo(CPData.getAngle90Width() * 25, 0);
        parkLine90.lineTo(CPData.getAngle90Width() * 25, CPData.getAngle90Depth() * 25);
    }

    /**
     * Sets the direction of the car parks to return
     *
     * @param dir the direction of the car parks to return.
     */
    public void setDirection(int dir) {
        if (dir >= 0 && dir <= DEG90) {
            parkDir = dir;
        }
    }
        /**
     * gets the direction of the car parks
     *
     * @return the direction of the car parks.
     */
    public int getDirection() {
        return parkDir;
    }

    /**
     * Gets the shape representing the park moved to a point and rotated.
     *
     * @param parkPos parks positions and rotation generated by algorithm.
     */
    public Shape getParkLine(AlgGeneratedPark parkPos) {
        Shape parkLinenew;
        AffineTransform Transform = new AffineTransform();
        Transform.setToTranslation(parkPos.getParkPosition().getX(), parkPos.getParkPosition().getY());
        Transform.rotate(parkPos.getParkAngle());

        switch (parkDir) {
            case Park.DEG60:
                parkLinenew = parkLine60.createTransformedShape(Transform);
                break;
            case Park.DEG90:
                parkLinenew = parkLine90.createTransformedShape(Transform);
                break;
            default:
                parkLinenew = parkLine0.createTransformedShape(Transform);
                break;
        }
        return parkLinenew;
    }
}
